esphome:
  name: front-gate
#  includes: cover.h

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "your encryption key"

ota:
  password: "your ota password"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Front-Gate Fallback Hotspot"
    password: "your fallback password"

captive_portal:

globals:
   - id: last_state
     type: int
     restore_value: no
     initial_value: COVER_CLOSED
   - id: last_x
     type: float
     restore_value: no
     initial_value: '1000.0'
     
binary_sensor:
  - platform: gpio
    name: "Raw Gate Status LED"
    id: raw_gate_status_LED
    internal: true
    pin:
      number: GPIO16
      mode: INPUT_PULLDOWN
    on_press:
      then:
        - sensor.template.publish:
            id: gate_status_template
            state: 1
    on_release:
      then:
        - sensor.template.publish:
            id: gate_status_template
            state: 0
        
sensor:
  - platform: template
    name: "Gate Status Template"
    id: gate_status_template
    internal: true
    update_interval: never
    filters:
#      - heartbeat: 0.1s
      - throttle_average: 1s
    on_value:
      then:
        - if:
            condition:
              not:
                lambda: 'return (isnan(x) and id(last_x) == 99) or x == id(last_x);'
            then:
              - cover.template.publish:
                  id: front_gate_sensor
                  position: !lambda |-
                    id(last_x) = x;
                    if (isnan(x)) {
                      id(last_x) = 99;
                      if (id(raw_gate_status_LED).state) {
                        return COVER_OPEN;
                      } else {
                        return COVER_CLOSED;
                      }
                    }
                    if (x < 0.05) {
                      return COVER_CLOSED;
                    }
                    if (x > 0.95) {
                      return COVER_OPEN;
                    }
                    return {};
                  current_operation: !lambda |-
                    if (isnan(x) or x < 0.05 or x > 0.95) {
                      id(last_state) = id(front_gate_sensor).position;
                      return CoverOperation::COVER_OPERATION_IDLE;
                    }
                    if (x >= 0.05 and x <= 0.95 and id(last_state) == COVER_OPEN) {
                      return CoverOperation::COVER_OPERATION_CLOSING;
                    }
                    if (x >= 0.05 and x <= 0.95 and id(last_state) == COVER_CLOSED) {
                      return CoverOperation::COVER_OPERATION_OPENING;
                    }
                    return {};

cover:
  - platform: template
    name: "Front Gate Cover Sensor"
    id: front_gate_sensor
    device_class: gate
